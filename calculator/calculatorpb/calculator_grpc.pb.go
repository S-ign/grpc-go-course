// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calculatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddServiceClient is the client API for AddService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddServiceClient interface {
	// Unary
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
}

type addServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddServiceClient(cc grpc.ClientConnInterface) AddServiceClient {
	return &addServiceClient{cc}
}

func (c *addServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/calculator.AddService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddServiceServer is the server API for AddService service.
// All implementations must embed UnimplementedAddServiceServer
// for forward compatibility
type AddServiceServer interface {
	// Unary
	Add(context.Context, *AddRequest) (*AddResponse, error)
	mustEmbedUnimplementedAddServiceServer()
}

// UnimplementedAddServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddServiceServer struct {
}

func (UnimplementedAddServiceServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAddServiceServer) mustEmbedUnimplementedAddServiceServer() {}

// UnsafeAddServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddServiceServer will
// result in compilation errors.
type UnsafeAddServiceServer interface {
	mustEmbedUnimplementedAddServiceServer()
}

func RegisterAddServiceServer(s grpc.ServiceRegistrar, srv AddServiceServer) {
	s.RegisterService(&AddService_ServiceDesc, srv)
}

func _AddService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.AddService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddService_ServiceDesc is the grpc.ServiceDesc for AddService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.AddService",
	HandlerType: (*AddServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _AddService_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator.proto",
}

// PrimeNumberDecompositionServiceClient is the client API for PrimeNumberDecompositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeNumberDecompositionServiceClient interface {
	// Server streaming
	PrimeNumberDecomposition(ctx context.Context, in *PrimeNumberDecompositionRequest, opts ...grpc.CallOption) (PrimeNumberDecompositionService_PrimeNumberDecompositionClient, error)
}

type primeNumberDecompositionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeNumberDecompositionServiceClient(cc grpc.ClientConnInterface) PrimeNumberDecompositionServiceClient {
	return &primeNumberDecompositionServiceClient{cc}
}

func (c *primeNumberDecompositionServiceClient) PrimeNumberDecomposition(ctx context.Context, in *PrimeNumberDecompositionRequest, opts ...grpc.CallOption) (PrimeNumberDecompositionService_PrimeNumberDecompositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimeNumberDecompositionService_ServiceDesc.Streams[0], "/calculator.PrimeNumberDecompositionService/PrimeNumberDecomposition", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeNumberDecompositionServicePrimeNumberDecompositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimeNumberDecompositionService_PrimeNumberDecompositionClient interface {
	Recv() (*PrimeNumberDecompositionResponse, error)
	grpc.ClientStream
}

type primeNumberDecompositionServicePrimeNumberDecompositionClient struct {
	grpc.ClientStream
}

func (x *primeNumberDecompositionServicePrimeNumberDecompositionClient) Recv() (*PrimeNumberDecompositionResponse, error) {
	m := new(PrimeNumberDecompositionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeNumberDecompositionServiceServer is the server API for PrimeNumberDecompositionService service.
// All implementations must embed UnimplementedPrimeNumberDecompositionServiceServer
// for forward compatibility
type PrimeNumberDecompositionServiceServer interface {
	// Server streaming
	PrimeNumberDecomposition(*PrimeNumberDecompositionRequest, PrimeNumberDecompositionService_PrimeNumberDecompositionServer) error
	mustEmbedUnimplementedPrimeNumberDecompositionServiceServer()
}

// UnimplementedPrimeNumberDecompositionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrimeNumberDecompositionServiceServer struct {
}

func (UnimplementedPrimeNumberDecompositionServiceServer) PrimeNumberDecomposition(*PrimeNumberDecompositionRequest, PrimeNumberDecompositionService_PrimeNumberDecompositionServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeNumberDecomposition not implemented")
}
func (UnimplementedPrimeNumberDecompositionServiceServer) mustEmbedUnimplementedPrimeNumberDecompositionServiceServer() {
}

// UnsafePrimeNumberDecompositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeNumberDecompositionServiceServer will
// result in compilation errors.
type UnsafePrimeNumberDecompositionServiceServer interface {
	mustEmbedUnimplementedPrimeNumberDecompositionServiceServer()
}

func RegisterPrimeNumberDecompositionServiceServer(s grpc.ServiceRegistrar, srv PrimeNumberDecompositionServiceServer) {
	s.RegisterService(&PrimeNumberDecompositionService_ServiceDesc, srv)
}

func _PrimeNumberDecompositionService_PrimeNumberDecomposition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeNumberDecompositionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeNumberDecompositionServiceServer).PrimeNumberDecomposition(m, &primeNumberDecompositionServicePrimeNumberDecompositionServer{stream})
}

type PrimeNumberDecompositionService_PrimeNumberDecompositionServer interface {
	Send(*PrimeNumberDecompositionResponse) error
	grpc.ServerStream
}

type primeNumberDecompositionServicePrimeNumberDecompositionServer struct {
	grpc.ServerStream
}

func (x *primeNumberDecompositionServicePrimeNumberDecompositionServer) Send(m *PrimeNumberDecompositionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PrimeNumberDecompositionService_ServiceDesc is the grpc.ServiceDesc for PrimeNumberDecompositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimeNumberDecompositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.PrimeNumberDecompositionService",
	HandlerType: (*PrimeNumberDecompositionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeNumberDecomposition",
			Handler:       _PrimeNumberDecompositionService_PrimeNumberDecomposition_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "calculator.proto",
}
