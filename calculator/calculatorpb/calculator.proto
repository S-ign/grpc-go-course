syntax = "proto3";

package calculator;

option go_package="github.com/S-ign/grpc-go-course/add/calculatorpb";

message Adding {
	int64 first_number = 1;
	int64 second_number = 2;
}

message AddRequest {
	Adding adding = 1;
}

message AddResponse {
	int64 sum = 1;
}

message PrimeNumberDecompositionData {
	int64 c_data = 1;
}

message PrimeNumberDecompositionRequest {
	PrimeNumberDecompositionData prime_number_decomposition_data = 1;
}

message PrimeNumberDecompositionResponse {
	int64 s_data = 1;
}

message Averaging {
	int64 number = 1;
}

message AverageRequest {
	Averaging averaging = 1;
}

message AverageResponse {
	double data = 1;
}

message NextNumber {
	int64 number = 1;
}

message FindMaximumRequest {
	NextNumber next_number = 1;
}

message FindMaximumResponse {
	int64 result = 1;
}

message SquareRootRequest {
	int32 number = 1;
}

message SquareRootResponse {
	double number_root = 1;
}

// CalculatorService preforms various calculator function
service CalculatorService {
	// Unary
	rpc Add(AddRequest) returns (AddResponse) {};
	// Server streaming
	rpc PrimeNumberDecomposition(PrimeNumberDecompositionRequest) returns (stream PrimeNumberDecompositionResponse) {};
	// Client streaming
	rpc Average(stream AverageRequest) returns (AverageResponse) {};
	// BiDirectional streaming
	rpc FindMaximum(stream FindMaximumRequest) returns (stream FindMaximumResponse) {};

	// Unary
	// error handling
	// this RPC will throw an exception if the sent number is negative
	// The error being sent is of type INVALID_ARGUMENT
	rpc SquareRoot(SquareRootRequest) returns (SquareRootResponse) {};
}
